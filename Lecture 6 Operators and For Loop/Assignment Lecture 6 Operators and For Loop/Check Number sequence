Check Number sequence

You are given S a sequence of n integers i.e. S = s1, s2, ..., sn. Compute if it is possible to split S into two parts : s1, s2, ..., si and si+1, si+2, â€¦.., sn (0 <= i <= n) in such a way that the first part is strictly decreasing while the second is strictly increasing one.
That is, in the sequence if numbers are decreasing, they can start increase at one point. And once number starts increasing, they cannot decrease at any point further.
Sequence made up of only increasing numbers or only decreasing numbers is a valid sequence. So in both the cases, print true.
You just need to print true/false. No need to split the sequence.
Input format :

Line 1 : Integer n
Line 2 : n integers (separated by space)

Output Format :

"true" or "false" (without quotes)

Sample Input 1 :

5
9 8 4 5 6

Sample Output 1 :

true

Sample Input 2 :

3
1 2 3

Sample Output 2 :

true

Sample Input 3 :

3
8 7 6

Sample Output 3 :

true

Sample Input 4 :

6
8 7 6 5 8 2

Sample Output 4 :

false


___________________________________________________________________________________________________________________

import java.util.Scanner;
public class Main {
//Write Your Code Here
public static void main(String[] args) {
    Scanner s = new Scanner(System.in);
	//System.out.println("Enter The Size of array");
	int size = s.nextInt();//reading the number of elements from the that we want to enter  
	int[] arr=new int[size];//creates an array of length size
	//System.out.println("Enter the elements of the array of the mentioned size");
	for (int ele=0;ele<size;ele++){
		arr [ele] = s.nextInt();//reading array elements from the user
	}
	boolean flag=true;
	for (int i=0; i<size-2; i++) {
		if(arr[i]-arr[i+1] != arr[i+1]-arr[i+2]) {
			flag=false;
			break;
		}
	}
	System.out.println(flag);
}
}

